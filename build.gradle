import com.modrinth.minotaur.TaskModrinthUpload

buildscript {
    repositories {
        maven {
            name = 'CrowdinTranslate source'
            url = "https://minecraft.guntram.de/maven/"
        }
    }
    dependencies {
        classpath 'de.guntram.mcmod:crowdin-translate:1.3+1.16'
    }
}

plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version "1.4.0"
    id 'com.modrinth.minotaur' version "1.1.0"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.mod_id
version = project.mod_version
group = "com.github.DawnTeam"

apply plugin: 'de.guntram.mcmod.crowdin-translate'
crowdintranslate.setCrowdinProjectname 'dawnteam'
crowdintranslate.setMinecraftProjectName project.mod_id
crowdintranslate.setJsonSourceName project.mod_id

repositories {
    jcenter()
    mavenLocal()
    maven { url 'https://jitpack.io' }
    maven { url 'http://maven.terraformersmc.com/' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modApi("io.github.prospector:modmenu:${project.modmenu_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    includeMod "me.shedaniel.cloth:config-2:${project.cloth_version}"
    includeMod "me.sargunvohra.mcmods:autoconfig1u:${project.autoconfig_version}"
    includeMod "com.terraformersmc.terraform-api:terraform-tree-api-v1:${project.terraform_tree_version}"
    includeMod "com.terraformersmc.terraform-api:terraform-shapes-api-v1:${project.terraform_shapes_version}"

    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
}

def includeMod(String dep) {
    dependencies.modApi(dep) {
        exclude(group: "net.fabricmc.fabric-api")
    }
    dependencies.include(dep) {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand project.properties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"

    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

build {
    dependsOn downloadTranslations
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            afterEvaluate {
                artifact remapJar
            }
        }
    }

    repositories {
    }
}

curseforge {
    if (System.getenv().CURSEFORGE_TOKEN) {
        apiKey = System.getenv().CURSEFORGE_TOKEN
    } else {
        println "No CURSEFORGE_TOKEN specified"
    }
    project {
        id = project.curseforge_id
        releaseType = project.mod_release_type
        project.curseforge_game_versions.split(", ").each {
            String gameVersion -> addGameVersion gameVersion
        }
        mainArtifact(file("${project.buildDir}/libs/${project.mod_id}-${project.mod_version}.jar"))
        mainArtifact.displayName = "$project.mod_name v$project.mod_version"
        if (!project.curseforge_embedded_libraries.isEmpty() || !project.curseforge_required_dependencies.isEmpty() || !project.curseforge_optional_dependencies.isEmpty()) {
            relations {
                if (!project.curseforge_embedded_libraries.isEmpty()) {
                    project.curseforge_embedded_libraries.split(", ").each {
                        String dep -> embeddedLibrary dep
                    }
                }
                if (!project.curseforge_required_dependencies.isEmpty()) {
                    project.curseforge_required_dependencies.split(", ").each {
                        String dep -> requiredDependency dep
                    }
                }
                if (!project.curseforge_optional_dependencies.isEmpty()) {
                    project.curseforge_optional_dependencies.split(", ").each {
                        String dep -> optionalDependency dep
                    }
                }
            }
        }
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

task modrinth(type: TaskModrinthUpload) {
    if (System.getenv().MODRINTH_TOKEN) {
        token = System.getenv().MODRINTH_TOKEN
    } else {
        println "No MODRINTH_TOKEN specified"
    }
    projectId = project.modrinth_id
    versionNumber = project.mod_version
    versionName = "$project.mod_name v$project.mod_version"
    uploadFile = file("${project.buildDir}/libs/${project.mod_id}-${project.mod_version}.jar")
    releaseType = project.mod_release_type
    project.modrinth_game_versions.split(", ").each {
        String gameVersion -> addGameVersion gameVersion
    }
    project.modrinth_mod_loaders.split(", ").each {
        String modLoader -> addLoader modLoader
    }
}